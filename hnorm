#!/bin/bash

function cif_header
{
	#header check
	file="$(basename $1)"
	header_check=$(cat $1 | head -n 11 | head -n 1)
	header_check1=$(cat $1 | head -n 11 | tail -n 1)
	if [[ "$header_check" = "/* ************************************************************************** */" && "$header_check1" = "/* ************************************************************************** */" ]]
	then
		printf "\0";
		if [ -f auteur ]
		then
			in_auth=$(cat auteur| tr '\n' ' ' | sed 's/ /./g' | rev | cut -c 2- | rev | sed 's/\./\\|/g')
			user1=$(cat -n $1 | grep "By\|by" | grep -v "$in_auth")
		fi
		h_a=$(cat $1 | head -n 11 | grep -c "$user ")
		if [[ "$user1" != "" ]]
		then
			printf "\e[1;95m   AUTHOR NAME ERROR\e[0m\n";
			printf "\e[93m    If author is \"\e[96m$user\e[93m\", something may be wrong in the header...\e[0m\n ";
			cat $1 | head -n 11 | grep "By\|by" | cut -c 2-47 | tr '*' ' ' | grep -v "$in_auth" ;
		else
			printf "\0";
		fi 2> /dev/null

		#filename_check
		file_check=$(cat $1 | head -n 4 | tail -n 1 | awk '{print $2}' | rev | cut -d'/' -f1 | rev)
		if [[ `printf "$file"` != "$file_check" ]]
		then
			printf "\e[1;95m   FILENAME ERROR\e[0m\n";
			printf "\e[93m    Your file is '\e[96m$file\e[93m', but your header calls it '\e[96m$file_check\e[93m'\e[0m\n";
		else
			printf "\0";
		fi
	else
		printf "\e[1;95m   NO HEADER CORRECTLY PLACED\e[0m\n";
		printf "\e[93m    This file's 1st line is:\e[0m ";
		cat -e $1 | head -n 1 | awk '{gsub("\$", "\033[92m$\033[0m")}1';
	fi
}

function bocal_norm_check
{
	printf "\r\e[94m*\e[0m\e[96mNORM BOCAL\e[0m               ( \033[94mBOCAL MADE IT SLOW...\033[0m )\n";
	qty=$(find . -type f \( -iname '*.h' -o -iname '*.c' \) | grep -xv '.' | sed "s/\.\///g" | wc -l | awk '{print $1}')
	lqty=`cat $(find . -iname '*.c' -o -iname '*.h') | wc -l | awk '{print $1}'`
	qtime=$(printf '%.0f' `echo "$lqty * 0.01" | bc`)
	qtytime=$(date -u -r $qtime +%T)
	printf "\n\033[93m$qty\033[0m files to check\n(it should take around \033[93m$qtytime\033[0m)\n\n"
	file=`find . -iname '*.h' -o -iname '*.c' | grep -xv '.' | sed "s/\.\///g"`
	/usr/bin/norminette `find . -iname '*.h' -o -iname '*.c' | grep -xv '.' | sed "s/\.\///g"` 2> /dev/null | awk 'fileref == 0 {fileref++} $0 !~ /Error/ {printf ("\033[0m[\033[33m%d\033[0m]", fileref++)} {gsub ("Norme: ", "\033[0m\033[1;94;4m"); gsub ("Error", "\033[0;91m	Error\033[0m"); gsub ("Warning", "\033[0;93mWarning\033[0m")}1'
}

function norm_check
{
	if [[ -f /usr/bin/norminette && -f /bin/zsh ]]
	then
		bocal_norm_check ;
	else
		return ;
	fi
}

function cif_cheat
{
	if [[ `echo $(basename $dir)` != `echo $(basename $PWD)` ]]
	then
		cd $dir;
	fi
	for file in `find . -type f \( -iname '*.h' -o -iname '*.c' \) | grep -xv '.' | sed "s/\.\///g"` ;
	do
		cat $file | grep -w "<stdio.h>\|printf(\|scanf(\|puts(\|putc(\|gets(\|getc(\|system(" | grep -v "tputs(\|ft_printf" > /dev/null 2> /dev/null && ( printf "\e[33m  $file\e[0m:\n\e[0m" && cat $file | grep -n "<stdio.h>\|printf(\|scanf(\|puts(\|putc(\|gets(\|getc(\|system(" | grep -v "tputs(\|ft_printf" | awk '{printf "   line ", gsub(/[ |	]+/," ")}1' );
		if [[ `cif_header $file 2> /dev/null` = "" ]]
		then
			printf "\0";
		else
			printf "  \e[91;4m" ; printf "$file" | awk '{print toupper($0)}' ; printf "\e[0m" ;
			cif_header $file;
		fi
	done 2> /dev/null
}

function cheat_check
{
	printf "*\e[96mDANGER\e[0m                   [  ..  ]";
	if [[ $(cif_cheat) = "" ]]
	then
		printf "\r\e[92m*\e[0m\e[96mDANGER\e[0m                   [\e[92m  OK  \e[0m]\n";
	else
		printf "\r\e[93m*\e[0m\e[96mDANGER\e[0m                   [\e[93m WARN \e[0m]\n";
		cif_cheat;
	fi
	printf "\n";
	norm_check;
}

function make_check
{
	printf "*\e[96mCOMPILE\e[0m                  [  ..  ]"
	make re > /dev/null 2> /dev/null &&
		( ((make re; make) | grep -w "make: Nothing to be done for" > /dev/null) &&
		(printf "\r\e[92m*\e[0m\e[96mCOMPILE\e[0m                  [\e[92m  OK  \e[0m]\n" && make fclean > /dev/null 2> /dev/null) ||
		(printf "\r\e[91m*\e[0m\e[96mCOMPILE\e[0m                  [\e[91m  KO  \e[0m]  (\e[91mThe Makefile relinks... Bloubloublou\e[0m)\n" && make fclean > /dev/null 2> /dev/null)
	) ||
		(printf "\r\e[91m*\e[0m\e[96mCOMPILE\e[0m                  [\e[91m  KO  \e[0m]\n" && make fclean > /dev/null 2> /dev/null);
	printf "\n";
	cheat_check;
}

function auth_check
{
	printf "*\e[96mAUTHOR FILE\e[0m              [  ..  ]";
	if [ `ls -1 | grep -w auteur | wc -l | awk '{print $1}'` = "1" ]
	then
		if [[ `cat -e auteur | grep $user` = `echo "$user$"` ]]
		then
			printf "\r\e[92m*\e[0m\e[96mAUTHOR FILE\e[0m              [\e[92m  OK  \e[0m]  (\e[96m$user\e[0m)\n";
		else
			printf "\r\e[91m*\e[0m\e[96mAUTHOR FILE\e[0m              [\e[91m  KO  \e[0m]  (\e[96m$user\e[0m: \e[91mAuthor name fail\e[0m)\n";
		fi
	else
		printf "\r\e[91m*\e[0m\e[96mAUTHOR FILE\e[0m              [\e[91m  KO  \e[0m]  (\e[91mNo author file\e[0m)\n";
	fi
	printf "\n";
	make_check;
}

function dir_check
{
	dir=$1;
	if [ "$dir" = "" ]
	then
		dir=".";
		auth_check;
	else
		if [ ! -d $dir ]
		then
			help_menu;
		else
			cd $dir;
			auth_check;
		fi
	fi
}

function download_update
{
	cd $(dirname $0) ;
	printf "\n\e[93m      Downloading update...\e[0m\n" ;
	git clone https://github.com/HoneyBadger42/HBPC.git > /dev/null 2>&1 && printf "\e[96m      Installing update...\e[0m\n" &&
		cp HBPC/hnorm . && rm -rf HBPC && printf "\e[92m      Done !\n\nYou can now use hnorm's last version !\e[0m\n\n";
	cd - > /dev/null
}

function help_menu
{
	clear
	printf "**********************************\n* ";
	printf "\e[1mHoney_Badger's Program Checker\e[0m *\n";
	printf "**********************************\n";
	printf "*    (\e[93mhnorm -h\e[0m for more info)    *\n";
	printf "**********************************\n";
	if [[ "$is_connected" = "" ]]
	then
		printf "\n";
	else
		if [[ "$off_ver" = "" ]]
		then
			printf "\n";
		else
			download_update ; exit 0;
		fi
	fi
	printf "Usage: \e[91mhnorm\e[0m \e[1;95m[ \e[96m-h\e[0m | \e[96m-v\e[0m | \e[92m-D\e[0m | \e[93m-u\e[0m <user> \e[35m[\e[0m<dir>\e[35m]\e[0m \e[1;95m]\e[0m\n\n";
	printf "\e[4mExamples\e[0m:\n";
	printf "  \e[96mhnorm -h\e[0m               -> display help\n";
	printf "  \e[96mhnorm -v\e[0m               -> display current version\n";
	printf "  \e[92mhnorm -D\e[0m               -> Download and install hnorm's update (EDIT, update is now automatic)\n";
	printf "  \e[93mhnorm\e[0m                  -> check the norm in current <dir>\n";
	printf "  \e[93mhnorm\e[0m <dir>            -> check the norm in selected <dir>\n";
	printf "  \e[93mhnorm -u\e[0m <user>        -> check the norm for the selected <user>\n";
	printf "  \e[93mhnorm -u\e[0m <user> <dir>  -> check the norm for the selected <user>, in the selected <dir>\n\n";
	return;
}

function main
{
	is_connected=$(ifconfig | grep -w "inet" | grep -v "127.0.0.1")
	cur_ver="v.2.6.1"
	no_check=0
	off_ver=$(curl -s https://github.com/HoneyBadger42/HBPC | grep "HBPC v" | grep -v "$cur_ver")
	clear
	printf "**********************************\n* ";
	printf "\e[1mHoney_Badger's Program Checker\e[0m *\n";
	printf "**********************************\n";
	printf "*    (\e[93mhnorm -h\e[0m for more info)    *\n";
	printf "**********************************\n";
	if [[ "$is_connected" = "" ]]
	then
		printf "\n";
	else
		if [[ "$off_ver" = "" ]]
		then
			printf "\n";
		else
			download_update ; exit 0;
		fi
	fi
	if [[ "$1" == "-h" || "$1" == "-v" || "$1" == "-D" || "$1" == "-u" ]]
	then
		while getopts "hvDu:" OPTION
		do
			case $OPTION in
				h) help_menu ; exit 0;;
			v) echo "Current version: $cur_ver" ; exit 0;;
		D) download_update ; exit 0;;
	u) if [[ "$OPTARG" != "-h" && "$OPTARG" != "-D" && "$OPTARG" != "-u" && "$OPTARG" == ${@: -1} ]]
	then
		user=$OPTARG;
		dir_check .;
	elif [[ "$OPTARG" != "-h" && "$OPTARG" != "-D" && "$OPTARG" != "-u"  && "$OPTARG" != "${@: -1}" ]]
	then
		user=$OPTARG;
		dir_check ${@: -1};
	else
		printf " Please enter a correct user name\n\n";
		exit 1;
	fi ;;
\?) help_menu ; exit 1;;
			esac
		done
	else
		user=`whoami`
		if [ $# = 1 ]
		then
			dir_check $1;
		else
			dir_check ${@: -1};
		fi
	fi
}

main $@;
